{"version":3,"sources":["Components/Result.js","Components/AnyCategory.js","Redux/AnyCategory/AnyCategoryActionCreators.js","Redux/AnyCategory/AnyCategoryActionTypes.js","Components/Home.js","Redux/AnyCategory/AnyCategoryReducers.js","Redux/Store.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","useEffect","console","log","$","prop","className","_","map","questions","question","index","Fragment","ListGroup","as","Item","active","dangerouslySetInnerHTML","__html","useranswered","correctanswers","connect","state","anycategory","Anycategory","dispatch","anyCategoryfetch","getState","axios","get","then","response","type","data","results","useState","showResultPage","setshowResultPage","handleanswers","pluck","find","length","parents","children","style","width","textAlign","color","marginBottom","quiz","incorrect_answers","push","correct_answer","options","sample","fontWeight","option","InputGroup","Prepend","Radio","aria-label","name","FormControl","background","value","disabled","Button","variant","onClick","confirmAlert","title","message","buttons","label","alert","Home","init","AnyCategoryReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.45f73523.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport _ from \"underscore\";\r\nimport $ from \"jquery\";\r\n\r\nfunction Result(props) {\r\n  useEffect(() => {\r\n    console.log($(\".ResultScreen\").prop(\"innerHTML\"));\r\n  }, []);\r\n  console.log(props);\r\n  return (\r\n    <div className=\"ResultScreen\">\r\n      <h2>Your QWIZ Result</h2>\r\n      {_.map(props.questions, (question, index) => {\r\n        return (\r\n          <React.Fragment>\r\n            <ListGroup as=\"ul\">\r\n              <ListGroup.Item as=\"li\" active>\r\n                <span\r\n                  dangerouslySetInnerHTML={{ __html: question.question }}\r\n                ></span>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item as=\"li\">\r\n                Your Answer:{\" \"}\r\n                <span\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: props.useranswered[index]\r\n                  }}\r\n                ></span>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item as=\"li\">\r\n                Correct Answer:{\" \"}\r\n                <span\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: props.correctanswers[index]\r\n                  }}\r\n                ></span>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n            <br />\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  anyCategoryQuiz,\r\n  fetchAnyCategory\r\n} from \"../Redux/CombinedActionCreator\";\r\nimport { default as _ } from \"underscore\";\r\nimport { FaHatWizard } from \"react-icons/fa\";\r\nimport { confirmAlert } from \"react-confirm-alert\"; // Import\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\r\nimport { default as $ } from \"jquery\";\r\nimport Result from \"./Result\";\r\nvar correctanswers = [];\r\nvar useranswered = [];\r\nfunction AnyCategory(props) {\r\n  const [showResultPage, setshowResultPage] = useState(false);\r\n  const submit = () => {\r\n    //alerts\r\n    confirmAlert({\r\n      title: \"Confirm to submit\",\r\n      message: \"Are you sure to do this.\",\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => handleanswers()\r\n        },\r\n        {\r\n          label: \"No\",\r\n          onClick: () => alert(\"Click No\")\r\n        }\r\n      ]\r\n    });\r\n  };\r\n  const reset = () => {\r\n    //alerts\r\n    confirmAlert({\r\n      title: \"Confirm to Reset\",\r\n      message: \"Are you sure to do this.\",\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => $('input[type=\"radio\"]').prop(\"checked\", false)\r\n        },\r\n        {\r\n          label: \"No\",\r\n          onClick: () => alert(\"Click No\")\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  const handleanswers = () => {\r\n    correctanswers = _.pluck(props.anycategory, \"correct_answer\");\r\n    useranswered = _.map($(\".question\"), question => {\r\n      var answer =\r\n        $(question).find('input[type=\"radio\"]:checked').length !== 0\r\n          ? $(question)\r\n              .find('input[type=\"radio\"]:checked')\r\n              .parents(\".input-group\")\r\n              .children(\"input\")\r\n              .prop(\"value\")\r\n          : \"\";\r\n      return answer;\r\n    });\r\n    setshowResultPage(true);\r\n  };\r\n  //\r\n  useEffect(() => {\r\n    // props.anyCategoryfetch;\r\n    props.anyCategoryfetch();\r\n\r\n    // setanyCategoryQuizArray(props.)\r\n  }, []);\r\n  return (\r\n    <div className=\"container\" style={{ width: \"30%\" }}>\r\n      {showResultPage ? (\r\n        <Result\r\n          correctanswers={correctanswers}\r\n          useranswered={useranswered}\r\n          questions={props.anycategory}\r\n        />\r\n      ) : (\r\n        <React.Fragment>\r\n          <h2 style={{ textAlign: \"center\" }}>\r\n            QWIZ\r\n            <FaHatWizard color=\"violet\" style={{ marginBottom: \"11px\" }} />\r\n          </h2>\r\n          {_.map(props.anycategory, (quiz, index) => {\r\n            quiz.incorrect_answers.push(quiz.correct_answer); //including correct option\r\n            let options = _.sample(\r\n              quiz.incorrect_answers,\r\n              quiz.incorrect_answers.length\r\n            ); //shuffle the array\r\n            console.log(options);\r\n            return (\r\n              <React.Fragment>\r\n                <div className=\"question\">\r\n                  <b>Question {index + 1}: </b>{\" \"}\r\n                  <span\r\n                    style={{ color: \"green\", fontWeight: 700 }}\r\n                    dangerouslySetInnerHTML={{ __html: quiz.question }}\r\n                  ></span>\r\n                  {_.map(options, option => {\r\n                    return (\r\n                      <React.Fragment>\r\n                        <InputGroup>\r\n                          <InputGroup.Prepend>\r\n                            <InputGroup.Radio\r\n                              aria-label=\"Radio button for following text input\"\r\n                              name={index}\r\n                            />\r\n                          </InputGroup.Prepend>\r\n                          <FormControl\r\n                            style={{ background: \"white\" }}\r\n                            aria-label=\"Text input with radio button\"\r\n                            value={option}\r\n                            disabled\r\n                          />\r\n                        </InputGroup>\r\n                        <br />\r\n                      </React.Fragment>\r\n                    );\r\n                  })}{\" \"}\r\n                </div>\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n          <Button\r\n            variant=\"outline-warning\"\r\n            onClick={() => {\r\n              submit();\r\n            }}\r\n          >\r\n            Submit\r\n          </Button>{\" \"}\r\n          <Button\r\n            variant=\"outline-warning\"\r\n            onClick={() => {\r\n              reset();\r\n            }}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    anycategory: state.Anycategory\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    anyCategoryfetch: () => dispatch(fetchAnyCategory())\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AnyCategory);\r\n","import { ANY_CATEGORY } from \"./AnyCategoryActionTypes\";\r\nimport axios from \"axios\";\r\nexport function anyCategoryQuiz(data) {\r\n  return {\r\n    type: ANY_CATEGORY,\r\n    data\r\n  };\r\n}\r\nexport function fetchAnyCategory() {\r\n  return (dispatch, getState) => {\r\n    axios.get(\"https://opentdb.com/api.php?amount=10\").then(function(response) {\r\n      // handle success\r\n      //   console.log(response.data.results);\r\n      dispatch(anyCategoryQuiz(response.data.results));\r\n    });\r\n  };\r\n}\r\n","export const ANY_CATEGORY = \"ANY_CATEGORY\";\r\n","import React from \"react\";\r\nimport AnyCategory from \"./AnyCategory\";\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <AnyCategory />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","// https://opentdb.com/api.php?amount=10\r\n// import React from 'react'\r\nconst init = { Anycategory: [] };\r\nfunction AnyCategoryReducers(state = init, action) {\r\n  switch (action.type) {\r\n    case \"ANY_CATEGORY\":\r\n      return { ...state, Anycategory: action.data };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default AnyCategoryReducers;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport AnyCategoryReducers from \"./AnyCategory/AnyCategoryReducers\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nexport const store = createStore(\r\n  AnyCategoryReducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\nstore.subscribe(() => {\r\n  console.log(store.getState());\r\n});\r\n","import React from \"react\";\nimport Home from \"./Components/Home\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Redux/Store\";\nfunction App() {\n  return (\n    <div className=\"App bg-light\">\n      <Provider store={store}>\n        <Home />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}